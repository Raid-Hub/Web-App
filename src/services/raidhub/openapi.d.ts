/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


/** OneOf type helpers */
type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };
type XOR<T, U> = (T | U) extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;

export interface paths {
  "/manifest": {
    /**
     * /manifest
     * @description The RaidHub manifest provides definitions for all activities and versions in the RaidHub database.
     */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["ManifestResponse"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/status": {
    /**
     * /status
     * @description Get the status of the RaidHub Services. Atlas: The PGCR crawler. Floodgates: The queue system for redacted PGCRs from bungie, almost exclusively during contest mode.
     */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["StatusResponse"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/player/search": {
    /**
     * /player/search
     * @description Search for players in the RaidHub database by Bungie name or platform display name.
     * Players who have not attempted a raid may not appear in the search results.
     * Results are ordered by a combination of the number of raid completions and last played date.
     */
    get: {
      parameters: {
        query: {
          count?: number;
          query: string;
          membershipType?: components["schemas"]["DestinyMembershipType"];
          global?: boolean;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["PlayerSearchResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "QueryValidationError";
              readonly error: components["schemas"]["QueryValidationError"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/player/{membershipId}/history": {
    /**
     * /player/{membershipId}/history
     * @description /activities is deprecated. Use /history now. Get a player's activity history. This endpoint uses date cursors to paginate through a player's activity history.
     * The first request should not include a cursor. Subsequent requests should include the `nextCursor`
     * value from the previous response. Note that the first request may not return the full number of activities requested
     * in order to optimize performance. Subsequent requests will return the full number of activities requested.
     */
    get: {
      parameters: {
        query?: {
          count?: number;
          cursor?: string;
        };
        path: {
          membershipId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["PlayerHistoryResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "QueryValidationError";
              readonly error: components["schemas"]["QueryValidationError"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description PlayerPrivateProfileError */
        403: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PlayerPrivateProfileError";
              readonly error: components["schemas"]["PlayerPrivateProfileError"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PlayerNotFoundError";
              readonly error: components["schemas"]["PlayerNotFoundError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PathValidationError";
              readonly error: components["schemas"]["PathValidationError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/player/{membershipId}/activities": {
    /**
     * /player/{membershipId}/activities
     * @deprecated
     * @description /activities is deprecated. Use /history now. Get a player's activity history. This endpoint uses date cursors to paginate through a player's activity history.
     * The first request should not include a cursor. Subsequent requests should include the `nextCursor`
     * value from the previous response. Note that the first request may not return the full number of activities requested
     * in order to optimize performance. Subsequent requests will return the full number of activities requested.
     */
    get: {
      parameters: {
        query?: {
          count?: number;
          cursor?: string;
        };
        path: {
          membershipId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["PlayerActivitiesResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "QueryValidationError";
              readonly error: components["schemas"]["QueryValidationError"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description PlayerPrivateProfileError */
        403: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PlayerPrivateProfileError";
              readonly error: components["schemas"]["PlayerPrivateProfileError"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PlayerNotFoundError";
              readonly error: components["schemas"]["PlayerNotFoundError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PathValidationError";
              readonly error: components["schemas"]["PathValidationError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/player/{membershipId}/basic": {
    /**
     * /player/{membershipId}/basic
     * @description An extremely low-cost API call. Get basic information Bungie information about a player. The information is not
     * guaranteed to be fully up-to-date, however, it should be accurate enough for most use cases where
     * you only have the membershipId available.
     */
    get: {
      parameters: {
        path: {
          membershipId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["PlayerBasicResponse"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PlayerNotFoundError";
              readonly error: components["schemas"]["PlayerNotFoundError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PathValidationError";
              readonly error: components["schemas"]["PathValidationError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/player/{membershipId}/profile": {
    /**
     * /player/{membershipId}/profile
     * @description Get a player's profile information. This includes global stats, activity stats, and world first entries.
     * This is used to hydrate the RaidHub profile page
     */
    get: {
      parameters: {
        path: {
          membershipId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["PlayerProfileResponse"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description PlayerPrivateProfileError */
        403: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PlayerPrivateProfileError";
              readonly error: components["schemas"]["PlayerPrivateProfileError"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PlayerNotFoundError";
              readonly error: components["schemas"]["PlayerNotFoundError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PathValidationError";
              readonly error: components["schemas"]["PathValidationError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/player/{membershipId}/teammates": {
    /**
     * /player/{membershipId}/teammates
     * @description Get a list of a player's top 100 teammates.
     */
    get: {
      parameters: {
        path: {
          membershipId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["PlayerTeammatesResponse"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description PlayerPrivateProfileError */
        403: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PlayerPrivateProfileError";
              readonly error: components["schemas"]["PlayerPrivateProfileError"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PlayerNotFoundError";
              readonly error: components["schemas"]["PlayerNotFoundError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PathValidationError";
              readonly error: components["schemas"]["PathValidationError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/player/{membershipId}/instances": {
    /**
     * /player/{membershipId}/instances
     * @description Find a set of instances based on the query parameters. Some parameters will not work together, such as providing a season outside the range of the min/max season. Requires authentication.
     */
    get: {
      parameters: {
        query?: {
          membershipIds?: readonly string[];
          activityId?: number;
          versionId?: number;
          completed?: boolean;
          fresh?: boolean;
          flawless?: boolean;
          playerCount?: number;
          minPlayerCount?: number;
          maxPlayerCount?: number;
          minDurationSeconds?: number | null;
          maxDurationSeconds?: number | null;
          season?: number;
          minSeason?: number;
          maxSeason?: number;
          minDate?: string;
          maxDate?: string;
        };
        path: {
          membershipId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["PlayerInstancesResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "QueryValidationError";
              readonly error: components["schemas"]["QueryValidationError"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description PlayerProtectedResourceError */
        403: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PlayerProtectedResourceError";
              readonly error: components["schemas"]["PlayerProtectedResourceError"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PlayerNotFoundError";
              readonly error: components["schemas"]["PlayerNotFoundError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PathValidationError";
              readonly error: components["schemas"]["PathValidationError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/instance/{instanceId}": {
    /**
     * /instance/{instanceId}
     * @description /activity is deprecated. Use /instance now. This returns a PGCR object with a shape more aligned with how RaidHub displays PGCRs.
     */
    get: {
      parameters: {
        path: {
          instanceId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["InstanceResponse"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InstanceNotFoundError";
              readonly error: components["schemas"]["InstanceNotFoundError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PathValidationError";
              readonly error: components["schemas"]["PathValidationError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/activity/{instanceId}": {
    /**
     * /activity/{instanceId}
     * @deprecated
     * @description /activity is deprecated. Use /instance now. This returns a PGCR object with a shape more aligned with how RaidHub displays PGCRs.
     */
    get: {
      parameters: {
        path: {
          instanceId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["ActivityResponse"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InstanceNotFoundError";
              readonly error: components["schemas"]["InstanceNotFoundError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PathValidationError";
              readonly error: components["schemas"]["PathValidationError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/leaderboard/individual/global/{category}": {
    /**
     * /leaderboard/individual/global/{category}
     * @description Individual leaderboards across all raids
     */
    get: {
      parameters: {
        query?: {
          count?: number;
          search?: string;
          page?: number;
        };
        path: {
          category: components["schemas"]["IndividualGlobalLeaderboardCategory"];
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["LeaderboardIndividualGlobalResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "QueryValidationError";
              readonly error: components["schemas"]["QueryValidationError"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PlayerNotOnLeaderboardError";
              readonly error: components["schemas"]["PlayerNotOnLeaderboardError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PathValidationError";
              readonly error: components["schemas"]["PathValidationError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/leaderboard/individual/raid/{raid}/{category}": {
    /**
     * /leaderboard/individual/raid/{raid}/{category}
     * @description Individual leaderboards for a specific raid
     */
    get: {
      parameters: {
        query?: {
          count?: number;
          search?: string;
          page?: number;
        };
        path: {
          raid: string;
          category: "clears" | "freshClears" | "sherpas";
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["LeaderboardIndividualRaidResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "QueryValidationError";
              readonly error: components["schemas"]["QueryValidationError"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PlayerNotOnLeaderboardError";
              readonly error: components["schemas"]["PlayerNotOnLeaderboardError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "RaidNotFoundError";
              readonly error: components["schemas"]["RaidNotFoundError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PathValidationError";
              readonly error: components["schemas"]["PathValidationError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/leaderboard/individual/pantheon/{version}/{category}": {
    /**
     * /leaderboard/individual/pantheon/{version}/{category}
     * @description Individual leaderboards for a specific pantheon version
     */
    get: {
      parameters: {
        query?: {
          count?: number;
          search?: string;
          page?: number;
        };
        path: {
          version: string;
          category: "clears" | "freshClears" | "score";
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["LeaderboardIndividualPantheonResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "QueryValidationError";
              readonly error: components["schemas"]["QueryValidationError"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PlayerNotOnLeaderboardError";
              readonly error: components["schemas"]["PlayerNotOnLeaderboardError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PantheonVersionNotFoundError";
              readonly error: components["schemas"]["PantheonVersionNotFoundError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PathValidationError";
              readonly error: components["schemas"]["PathValidationError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/leaderboard/team/first/{activity}/{version}": {
    /**
     * /leaderboard/team/first/{activity}/{version}
     * @description Ranking of the first 1000 completions of each activity version.
     * Use the /contest endpoint instead to get the full rankings for the duration of the contest.
     */
    get: {
      parameters: {
        query?: {
          count?: number;
          search?: string;
          page?: number;
        };
        path: {
          activity: string;
          version: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["LeaderboardTeamFirstResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "QueryValidationError";
              readonly error: components["schemas"]["QueryValidationError"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PlayerNotOnLeaderboardError";
              readonly error: components["schemas"]["PlayerNotOnLeaderboardError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InvalidActivityVersionComboError";
              readonly error: components["schemas"]["InvalidActivityVersionComboError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PathValidationError";
              readonly error: components["schemas"]["PathValidationError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/leaderboard/team/contest/{raid}": {
    /**
     * /leaderboard/team/contest/{raid}
     * @description Ranking of all teams which completed the official contest version of the raid during the contest period.
     */
    get: {
      parameters: {
        query?: {
          count?: number;
          search?: string;
          page?: number;
        };
        path: {
          raid: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["LeaderboardTeamContestResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "QueryValidationError";
              readonly error: components["schemas"]["QueryValidationError"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PlayerNotOnLeaderboardError";
              readonly error: components["schemas"]["PlayerNotOnLeaderboardError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "RaidNotFoundError";
              readonly error: components["schemas"]["RaidNotFoundError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PathValidationError";
              readonly error: components["schemas"]["PathValidationError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/leaderboard/clan": {
    /**
     * /leaderboard/clan
     * @description Get a page of the clan leaderboard based on query parameters
     */
    get: {
      parameters: {
        query?: {
          count?: number;
          page?: number;
          column?: "clears" | "average_clears" | "fresh_clears" | "average_fresh_clears" | "sherpas" | "average_sherpas" | "time_played_seconds" | "average_time_played_seconds" | "total_contest_score" | "weighted_contest_score";
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["LeaderboardClanResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "QueryValidationError";
              readonly error: components["schemas"]["QueryValidationError"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/pgcr/{instanceId}": {
    /**
     * /pgcr/{instanceId}
     * @description Get a raw post game carnage report by instanceId.
     * This is essentially the raw data from the Bungie API, with a few fields trimmed off.
     * It should be a subset of the data returned by the Bungie API.
     * Useful if you need to access PGCRs when Bungie's API is down.
     */
    get: {
      parameters: {
        path: {
          instanceId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["PgcrResponse"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PGCRNotFoundError";
              readonly error: components["schemas"]["PGCRNotFoundError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PathValidationError";
              readonly error: components["schemas"]["PathValidationError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/clan/{groupId}": {
    /**
     * /clan/{groupId}
     * @description Get the stats for a clan. Data updates weekly.
     */
    get: {
      parameters: {
        path: {
          groupId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["ClanResponse"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ClanNotFoundError";
              readonly error: components["schemas"]["ClanNotFoundError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PathValidationError";
              readonly error: components["schemas"]["PathValidationError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
        /** @description BungieServiceOffline */
        503: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "BungieServiceOffline";
              readonly error: components["schemas"]["BungieServiceOffline"];
            };
          };
        };
      };
    };
  };
  "/metrics/weapons/rolling-week": {
    /**
     * /metrics/weapons/rolling-week
     * @description Wet the top weapons in each slot over the past 168 hours (7 days)
     */
    get: {
      parameters: {
        query?: {
          sort?: "usage" | "kills";
          count?: number | null;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["MetricsWeaponsRollingWeekResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "QueryValidationError";
              readonly error: components["schemas"]["QueryValidationError"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/metrics/population/rolling-day": {
    /**
     * /metrics/population/rolling-day
     * @description Get the daily player population by raid
     */
    get: {
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["MetricsPopulationRollingDayResponse"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/admin/query": {
    /**
     * /admin/query
     * @description Run a query against the database
     */
    post: {
      readonly requestBody: {
        readonly content: {
          readonly "application/json": {
            readonly query: string;
            /** @enum {string} */
            readonly type: "SELECT" | "EXPLAIN";
            /** @default false */
            readonly ignoreCost?: boolean;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["AdminQueryResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "BodyValidationError";
              readonly error: components["schemas"]["BodyValidationError"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Forbidden */
        403: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InsufficientPermissionsError";
              readonly error: components["schemas"]["InsufficientPermissionsError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
        /** @description AdminQuerySyntaxError */
        501: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "AdminQuerySyntaxError";
              readonly error: components["schemas"]["AdminQuerySyntaxError"];
            };
          };
        };
      };
    };
  };
  "/admin/reporting/standing/{instanceId}": {
    /**
     * /admin/reporting/standing/{instanceId}
     * @description Find a set of instances based on the query parameters. Some parameters will not work together, such as providing a season outside the range of the min/max season. Requires authentication.
     */
    get: {
      parameters: {
        path: {
          instanceId: string;
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["AdminReportingStandingResponse"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": ({
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InstanceNotFoundError";
              readonly error: components["schemas"]["InstanceNotFoundError"] & {
                /** Format: int64 */
                readonly instanceId?: string;
              };
            }) | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PathValidationError";
              readonly error: components["schemas"]["PathValidationError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/admin/reporting/blacklist/{instanceId}": {
    /**
     * /admin/reporting/blacklist/{instanceId}
     * @description Blacklist an instance from leaderboards, as well as the players involved.
     */
    put: {
      parameters: {
        path: {
          instanceId: string;
        };
      };
      readonly requestBody: {
        readonly content: {
          readonly "application/json": {
            readonly reportId?: number;
            readonly reason: string;
            /** @default false */
            readonly removeBlacklist?: boolean;
            readonly players?: readonly {
                readonly membershipId: string;
                readonly reason: string;
              }[];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["AdminReportingBlacklistResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PlayerNotInInstance";
              readonly error: components["schemas"]["PlayerNotInInstance"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "BodyValidationError";
              readonly error: components["schemas"]["BodyValidationError"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InstanceNotFoundError";
              readonly error: components["schemas"]["InstanceNotFoundError"];
            } | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PathValidationError";
              readonly error: components["schemas"]["PathValidationError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/admin/reporting/player/{membershipId}": {
    /**
     * /admin/reporting/player/{membershipId}
     * @description Update fields on a player. Currently, only the cheat level can be updated.
     */
    patch: {
      parameters: {
        path: {
          membershipId: string;
        };
      };
      readonly requestBody: {
        readonly content: {
          readonly "application/json": {
            readonly cheatLevel?: components["schemas"]["CheatLevel"];
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["AdminReportingPlayerResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "BodyValidationError";
              readonly error: components["schemas"]["BodyValidationError"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description Not found */
        404: {
          content: {
            readonly "application/json": ({
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PlayerNotFoundError";
              readonly error: components["schemas"]["PlayerNotFoundError"] & {
                /** Format: int64 */
                readonly membershipId?: string;
              };
            }) | {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "PathValidationError";
              readonly error: components["schemas"]["PathValidationError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/authorize/admin": {
    /**
     * /authorize/admin
     * @description Authorize an admin user. Requires the client secret.
     */
    post: {
      readonly requestBody: {
        readonly content: {
          readonly "application/json": {
            readonly bungieMembershipId: string;
            readonly adminClientSecret: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["AuthorizeAdminResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "BodyValidationError";
              readonly error: components["schemas"]["BodyValidationError"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description InvalidClientSecretError */
        403: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InvalidClientSecretError";
              readonly error: components["schemas"]["InvalidClientSecretError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
  "/authorize/user": {
    /**
     * /authorize/user
     * @description Authenticate a user. Grants permission to access restricted resources.
     */
    post: {
      readonly requestBody: {
        readonly content: {
          readonly "application/json": {
            readonly bungieMembershipId: string;
            readonly destinyMembershipIds: readonly string[];
            readonly clientSecret: string;
          };
        };
      };
      responses: {
        /** @description Success */
        200: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: true;
              readonly response: components["schemas"]["AuthorizeUserResponse"];
            };
          };
        };
        /** @description Bad request */
        400: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "BodyValidationError";
              readonly error: components["schemas"]["BodyValidationError"];
            };
          };
        };
        /** @description Unauthorized */
        401: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "ApiKeyError";
              readonly error: components["schemas"]["ApiKeyError"];
            };
          };
        };
        /** @description InvalidClientSecretError */
        403: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InvalidClientSecretError";
              readonly error: components["schemas"]["InvalidClientSecretError"];
            };
          };
        };
        /** @description Internal Server Error */
        500: {
          content: {
            readonly "application/json": {
              /** Format: date-time */
              readonly minted: string;
              /** @enum {boolean} */
              readonly success: false;
              /** @enum {string} */
              readonly code: "InternalServerError";
              readonly error: components["schemas"]["InternalServerError"];
            };
          };
        };
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    /** @enum {string} */
    readonly ErrorCode: "ApiKeyError" | "PathValidationError" | "QueryValidationError" | "BodyValidationError" | "PlayerNotFoundError" | "PlayerPrivateProfileError" | "PlayerProtectedResourceError" | "InstanceNotFoundError" | "PGCRNotFoundError" | "PlayerNotOnLeaderboardError" | "PlayerNotInInstance" | "RaidNotFoundError" | "PantheonVersionNotFoundError" | "InvalidActivityVersionComboError" | "ClanNotFoundError" | "AdminQuerySyntaxError" | "InsufficientPermissionsError" | "InvalidClientSecretError" | "InternalServerError" | "BungieServiceOffline";
    readonly RaidHubResponse: OneOf<[{
      /** Format: date-time */
      readonly minted: string;
      /** @enum {boolean} */
      readonly success: true;
      readonly response?: unknown;
    }, {
      /** Format: date-time */
      readonly minted: string;
      /** @enum {boolean} */
      readonly success: false;
      readonly code: components["schemas"]["ErrorCode"];
      readonly error?: unknown;
    }]>;
    readonly ApiKeyError: {
      readonly message: "Invalid API Key" | "Missing API Key";
      readonly apiKey: string | null;
      readonly origin: string | null;
    };
    readonly ZodIssue: {
      readonly fatal?: boolean;
      readonly message: string;
      readonly path: readonly (string | number)[];
      /** @enum {string} */
      readonly code: "invalid_type" | "invalid_literal" | "custom" | "invalid_union" | "invalid_union_discriminator" | "invalid_enum_value" | "unrecognized_keys" | "invalid_arguments" | "invalid_return_type" | "invalid_date" | "invalid_string" | "too_small" | "too_big" | "invalid_intersection_types" | "not_multiple_of" | "not_finite";
    };
    readonly BodyValidationError: {
      readonly issues: readonly components["schemas"]["ZodIssue"][];
    };
    readonly InsufficientPermissionsError: {
      /** @enum {string} */
      readonly message: "Forbidden";
    };
    readonly InternalServerError: {
      readonly message: string;
    };
    readonly PathValidationError: {
      readonly issues: readonly components["schemas"]["ZodIssue"][];
    };
    readonly QueryValidationError: {
      readonly issues: readonly components["schemas"]["ZodIssue"][];
    };
    /** @enum {integer} */
    readonly DestinyMembershipType: 0 | 1 | 2 | 3 | 4 | 5 | 6 | -1;
    readonly Instance: {
      /** Format: int64 */
      readonly instanceId: string;
      /** Format: uint32 */
      readonly hash: number;
      readonly activityId: number;
      readonly versionId: number;
      readonly completed: boolean;
      readonly flawless: boolean | null;
      readonly fresh: boolean | null;
      readonly playerCount: number;
      readonly score: number;
      /** Format: date-time */
      readonly dateStarted: string;
      /** Format: date-time */
      readonly dateCompleted: string;
      readonly season: number;
      /** @description Instance duration in seconds */
      readonly duration: number;
      readonly platformType: components["schemas"]["DestinyMembershipType"];
      /** @description If the instance was completed before the day one end date */
      readonly isDayOne: boolean;
      /** @description If the instance was completed before the contest end date */
      readonly isContest: boolean;
      /** @description If the instance was completed before the week one end date */
      readonly isWeekOne: boolean;
      /** @description If the instance is blacklisted from leaderboards */
      readonly isBlacklisted: boolean;
    };
    readonly InstanceBasic: {
      /** Format: int64 */
      readonly instanceId: string;
      /** Format: uint32 */
      readonly hash: number;
      readonly completed: boolean;
      readonly playerCount: number;
      readonly score: number;
      readonly fresh: boolean | null;
      readonly flawless: boolean | null;
      /** Format: date-time */
      readonly dateStarted: string;
      /** Format: date-time */
      readonly dateCompleted: string;
      readonly season: number;
      readonly duration: number;
      readonly platformType: components["schemas"]["DestinyMembershipType"] | null;
      /** Format: date-time */
      readonly dateResolved: string;
    };
    /**
     * @description The level of cheating detected on the account.
     * 0: None
     * 1: Suspicious
     * 2: Moderate
     * 3: Extreme
     * 4: Blacklisted
     * @enum {integer}
     */
    readonly CheatLevel: 0 | 1 | 2 | 3 | 4;
    /**
     * @example {
     *   "bungieGlobalDisplayName": "Newo",
     *   "bungieGlobalDisplayNameCode": "9010",
     *   "membershipId": "4611686018488107374",
     *   "displayName": "xx_newo_xx",
     *   "iconPath": "/common/destiny2_content/icons/93844c8b76ea80683a880479e3506980.jpg",
     *   "membershipType": 3,
     *   "lastSeen": "2021-05-01T00:00:00.000Z",
     *   "isPrivate": false,
     *   "cheatLevel": 0
     * }
     */
    readonly PlayerInfo: {
      /** Format: int64 */
      readonly membershipId: string;
      /** @description The platform on which the player created their account. */
      readonly membershipType: components["schemas"]["DestinyMembershipType"] | null;
      readonly iconPath: string | null;
      /** @description The platform-specific display name of the player. No longer shown in-game. */
      readonly displayName: string | null;
      readonly bungieGlobalDisplayName: string | null;
      readonly bungieGlobalDisplayNameCode: string | null;
      /** Format: date-time */
      readonly lastSeen: string;
      /** @description Whether or not the player has chosen to hide their on Bungie.net. */
      readonly isPrivate: boolean;
      readonly cheatLevel: components["schemas"]["CheatLevel"];
    };
    /**
     * Format: int64
     * @description A bitmask of flagged heuristics:
     * 2^0 = Manual
     * 2^1 = Leviathan
     * 2^2 = EaterOfWorlds
     * 2^3 = SpireOfStars
     * 2^4 = LastWish
     * 2^5 = ScourgeOfThePast
     * 2^6 = CrownOfSorrow
     * 2^7 = GardenOfSalvation
     * 2^8 = DeepStoneCrypt
     * 2^9 = VaultOfGlass
     * 2^10 = VowOfTheDisciple
     * 2^11 = KingsFall
     * 2^12 = RootOfNightmares
     * 2^13 = CrotasEnd
     * 2^14 = SalvationsEdge
     * 2^15 = Raid15
     * 2^16 = Raid16
     * 2^17 = Raid17
     * 2^18 = Raid18
     * 2^19 = Raid19
     * 2^20 = Raid20
     * 2^21 = Raid21
     * 2^22 = Raid22
     * 2^23 = Raid23
     * 2^24 = Raid24
     * 2^25 = Raid25
     * 2^26 = Raid26
     * 2^27 = Raid27
     * 2^28 = Raid28
     * 2^29 = Raid29
     * 2^30 = Raid30
     * 2^31 = Raid31
     * 2^32 = Raid32
     * 2^33 = Pantheon
     * 2^34 = Bit34
     * 2^35 = Bit35
     * 2^36 = Bit36
     * 2^37 = Bit37
     * 2^38 = Bit38
     * 2^39 = Bit39
     * 2^40 = Bit40
     * 2^41 = Bit41
     * 2^42 = Bit42
     * 2^43 = Bit43
     * 2^44 = Bit44
     * 2^45 = Bit45
     * 2^46 = Bit46
     * 2^47 = Bit47
     * 2^48 = Bit48
     * 2^49 = Bit49
     * 2^50 = Bit50
     * 2^51 = Bit51
     * 2^52 = Bit52
     * 2^53 = Solo
     * 2^54 = TotalInstanceKills
     * 2^55 = TwoPlusCheaters
     * 2^56 = PlayerTotalKills
     * 2^57 = PlayerWeaponDiversity
     * 2^58 = PlayerSuperKills
     * 2^59 = PlayerGrenadeKills
     * 2^60 = TooFast
     * 2^61 = TooFewPlayersFresh
     * 2^62 = TooFewPlayersCheckpoint
     */
    readonly CheatCheckBitmask: string;
    readonly InstanceBlacklist: {
      /** Format: int64 */
      readonly instanceId: string;
      /** @enum {string} */
      readonly reportSource: "Manual" | "CheatCheck" | "WebReport";
      readonly reportId: number | null;
      readonly cheatCheckVersion: string | null;
      readonly reason: string;
      /** Format: date-time */
      readonly createdAt: string;
    };
    readonly InstanceFlag: {
      /** Format: date-time */
      readonly flaggedAt: string;
      readonly cheatCheckVersion: string;
      readonly cheatProbability: number;
      readonly cheatCheckBitmask: components["schemas"]["CheatCheckBitmask"];
    };
    readonly InstancePlayerFlag: {
      /** Format: date-time */
      readonly flaggedAt: string;
      readonly cheatCheckVersion: string;
      readonly cheatProbability: number;
      readonly cheatCheckBitmask: components["schemas"]["CheatCheckBitmask"];
      /** Format: int64 */
      readonly instanceId: string;
      /** Format: int64 */
      readonly membershipId: string;
    };
    readonly InstancePlayerStanding: {
      readonly playerInfo: components["schemas"]["PlayerInfo"];
      readonly flags: readonly components["schemas"]["InstancePlayerFlag"][];
      readonly clears: number;
      readonly completed: boolean;
      readonly timePlayedSeconds: number;
      readonly blacklistedInstances: readonly {
          /** Format: int64 */
          readonly instanceId: string;
          /** Format: date-time */
          readonly instanceDate: string;
          readonly reason: string;
          readonly individualReason: string;
          /** Format: date-time */
          readonly createdAt: string;
        }[];
      readonly otherRecentFlags: readonly components["schemas"]["InstancePlayerFlag"][];
    };
    readonly ClanBannerData: {
      readonly decalId: number;
      readonly decalColorId: number;
      readonly decalBackgroundColorId: number;
      readonly gonfalonId: number;
      readonly gonfalonColorId: number;
      readonly gonfalonDetailId: number;
      readonly gonfalonDetailColorId: number;
    };
    readonly Clan: {
      /** Format: int64 */
      readonly groupId: string;
      readonly name: string;
      readonly callSign: string;
      readonly motto: string;
      readonly clanBannerData: components["schemas"]["ClanBannerData"];
      /** Format: date-time */
      readonly lastUpdated: string;
      readonly knownMemberCount: number;
    };
    readonly ClanLeaderboardAggregateStats: {
      readonly clears: number;
      readonly averageClears: number;
      readonly freshClears: number;
      readonly averageFreshClears: number;
      readonly sherpas: number;
      readonly averageSherpas: number;
      readonly timePlayedSeconds: number;
      readonly averageTimePlayedSeconds: number;
      readonly totalContestScore: number;
      readonly weightedContestScore: number;
    };
    readonly ClanAggregateStats: {
      readonly stats: components["schemas"]["ClanLeaderboardAggregateStats"];
      readonly ranks: {
        readonly clearsRank: number;
        readonly freshClearsRank: number;
        readonly sherpasRank: number;
        readonly timePlayedSecondsRank: number;
        readonly totalContestScoreRank: number;
        readonly weightedContestScoreRank: number;
      } | null;
    };
    readonly ClanLeaderboardEntry: {
      readonly clan: components["schemas"]["Clan"];
      readonly clears: number;
      readonly averageClears: number;
      readonly freshClears: number;
      readonly averageFreshClears: number;
      readonly sherpas: number;
      readonly averageSherpas: number;
      readonly timePlayedSeconds: number;
      readonly averageTimePlayedSeconds: number;
      readonly totalContestScore: number;
      readonly weightedContestScore: number;
    };
    readonly ClanMemberStats: {
      readonly clears: number;
      readonly freshClears: number;
      readonly sherpas: number;
      readonly totalTimePlayedSeconds: number;
      readonly contestScore: number;
    };
    readonly ClanStats: {
      readonly aggregateStats: components["schemas"]["ClanAggregateStats"];
      readonly members: readonly ({
          readonly playerInfo: components["schemas"]["PlayerInfo"] | null;
          readonly stats: components["schemas"]["ClanMemberStats"];
        })[];
    };
    readonly InstanceMetadata: {
      readonly activityName: string;
      readonly versionName: string;
      readonly isRaid: boolean;
    };
    readonly InstanceCharacterWeapon: {
      /** Format: uint32 */
      readonly weaponHash: number;
      readonly kills: number;
      readonly precisionKills: number;
    };
    readonly InstanceCharacter: {
      /** Format: int64 */
      readonly characterId: string;
      /** Format: uint32 */
      readonly classHash: number | null;
      /** Format: uint32 */
      readonly emblemHash: number | null;
      readonly completed: boolean;
      readonly timePlayedSeconds: number;
      readonly startSeconds: number;
      readonly score: number;
      readonly kills: number;
      readonly deaths: number;
      readonly assists: number;
      readonly precisionKills: number;
      readonly superKills: number;
      readonly grenadeKills: number;
      readonly meleeKills: number;
      readonly weapons: readonly components["schemas"]["InstanceCharacterWeapon"][];
    };
    readonly InstancePlayer: {
      readonly completed: boolean;
      readonly isFirstClear: boolean;
      readonly sherpas: number;
      readonly timePlayedSeconds: number;
    };
    readonly InstancePlayerExtended: components["schemas"]["InstancePlayer"] & {
      readonly playerInfo: components["schemas"]["PlayerInfo"];
      readonly characters: readonly components["schemas"]["InstanceCharacter"][];
    };
    readonly InstanceExtended: components["schemas"]["Instance"] & ({
      readonly leaderboardRank: number | null;
      readonly metadata: components["schemas"]["InstanceMetadata"];
      readonly players: readonly components["schemas"]["InstancePlayerExtended"][];
    });
    readonly TeamLeaderboardEntry: {
      readonly position: number;
      readonly rank: number;
      readonly value: number;
      /** Format: int64 */
      readonly instanceId: string;
      readonly players: readonly components["schemas"]["PlayerInfo"][];
    };
    readonly IndividualLeaderboardEntry: {
      readonly position: number;
      readonly rank: number;
      readonly value: number;
      readonly playerInfo: components["schemas"]["PlayerInfo"];
    };
    readonly LeaderboardData: OneOf<[{
      /** @enum {string} */
      readonly type: "team";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["TeamLeaderboardEntry"][];
    }, {
      /** @enum {string} */
      readonly type: "individual";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["IndividualLeaderboardEntry"][];
    }]>;
    /** @enum {string} */
    readonly IndividualGlobalLeaderboardCategory: "clears" | "full-clears" | "sherpas" | "speedrun" | "world-first-rankings" | "in-raid-time";
    /** @description Pagination parameters for leaderboard data */
    readonly LeaderboardPagination: {
      /** @default 50 */
      readonly count?: number;
      readonly search?: string;
      /**
       * @description Page number of leaderboard data. Ignored if `search` is provided. Defaults to 1
       * @default 1
       */
      readonly page?: number;
    };
    /**
     * @description The definition of an activity in the RaidHub database.
     * @example {
     *   "id": 9,
     *   "name": "Vault of Glass",
     *   "path": "vaultofglass",
     *   "isSunset": false,
     *   "isRaid": true,
     *   "releaseDate": "2021-05-22T00:00:00.000Z",
     *   "dayOneEnd": "2021-05-23T00:00:00.000Z",
     *   "contestEnd": "2021-05-23T00:00:00.000Z",
     *   "weekOneEnd": "2021-05-25T00:00:00.000Z",
     *   "milestoneHash": 1888320892
     * }
     */
    readonly ActivityDefinition: {
      readonly id: number;
      readonly name: string;
      readonly path: string;
      readonly isSunset: boolean;
      readonly isRaid: boolean;
      /** Format: date-time */
      readonly releaseDate: string | null;
      /** Format: date-time */
      readonly dayOneEnd: string | null;
      /** Format: date-time */
      readonly contestEnd: string | null;
      /** Format: date-time */
      readonly weekOneEnd: string | null;
      /** Format: uint32 */
      readonly milestoneHash: number | null;
    };
    /** @description The definition of a version in the RaidHub database. */
    readonly VersionDefinition: {
      readonly id: number;
      readonly name: string;
      readonly path: string;
      readonly associatedActivityId: number | null;
      readonly isChallengeMode: boolean;
    };
    readonly WeaponMetric: {
      /** Format: uint32 */
      readonly hash: number;
      readonly totalUsage: number;
      readonly totalKills: number;
      readonly totalPrecisionKills: number;
    };
    /** @description A map of each activity Id to its player count */
    readonly PopulationByRaidMetric: {
      [key: string]: number;
    };
    /** @description A raw PGCR with a few redundant fields removed */
    readonly RaidHubPostGameCarnageReport: {
      /** Format: date-time */
      readonly period: string;
      readonly startingPhaseIndex?: number;
      readonly activityWasStartedFromBeginning?: boolean;
      readonly activityDetails: {
        /** Format: uint32 */
        readonly directorActivityHash: number;
        /** Format: int64 */
        readonly instanceId: string;
        /** @enum {integer} */
        readonly mode: 0 | 2 | 3 | 4 | 5 | 6 | 7 | 9 | 10 | 11 | 12 | 13 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91;
        readonly modes: readonly (0 | 2 | 3 | 4 | 5 | 6 | 7 | 9 | 10 | 11 | 12 | 13 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91)[];
        readonly membershipType: components["schemas"]["DestinyMembershipType"];
      };
      readonly entries: readonly ({
          readonly player: {
            readonly destinyUserInfo: {
              readonly iconPath?: string | null;
              readonly crossSaveOverride: components["schemas"]["DestinyMembershipType"];
              readonly applicableMembershipTypes?: (readonly components["schemas"]["DestinyMembershipType"][]) | null;
              readonly membershipType?: components["schemas"]["DestinyMembershipType"] | null;
              readonly membershipId: string;
              readonly displayName?: string | null;
              readonly bungieGlobalDisplayName?: string | null;
              readonly bungieGlobalDisplayNameCode?: number | null;
            };
            readonly characterClass?: string | null;
            /** Format: uint32 */
            readonly classHash: number;
            /** Format: uint32 */
            readonly raceHash: number;
            /** Format: uint32 */
            readonly genderHash: number;
            readonly characterLevel: number;
            readonly lightLevel: number;
            /** Format: uint32 */
            readonly emblemHash: number;
          };
          readonly characterId: string;
          readonly values: {
            [key: string]: {
              readonly basic: {
                readonly value: number;
                readonly displayValue: string;
              };
            };
          };
          readonly extended?: {
            readonly weapons?: (readonly {
                readonly referenceId: number;
                readonly values: {
                  [key: string]: {
                    readonly basic: {
                      readonly value: number;
                      readonly displayValue: string;
                    };
                  };
                };
              }[]) | null;
            readonly values: {
              [key: string]: {
                readonly basic: {
                  readonly value: number;
                  readonly displayValue: string;
                };
              };
            };
          };
        })[];
    };
    readonly InstanceForPlayer: components["schemas"]["Instance"] & {
      readonly player: components["schemas"]["InstancePlayer"];
    };
    readonly InstanceWithPlayers: components["schemas"]["Instance"] & {
      readonly players: readonly components["schemas"]["PlayerInfo"][];
    };
    readonly PlayerProfileActivityStats: {
      readonly activityId: number;
      readonly freshClears: number;
      readonly clears: number;
      readonly sherpas: number;
      readonly fastestInstance: components["schemas"]["Instance"] | null;
    };
    readonly GlobalStat: {
      readonly value: number;
      readonly rank: number | null;
      readonly percentile: number | null;
    };
    readonly PlayerProfileGlobalStats: {
      readonly clears: components["schemas"]["GlobalStat"];
      readonly freshClears: components["schemas"]["GlobalStat"];
      readonly sherpas: components["schemas"]["GlobalStat"];
      readonly totalTimePlayed: components["schemas"]["GlobalStat"];
      readonly contest: components["schemas"]["GlobalStat"];
      readonly sumOfBest: components["schemas"]["GlobalStat"];
    };
    readonly WorldFirstEntry: {
      readonly activityId: number;
      /** Format: int64 */
      readonly instanceId: string;
      readonly timeAfterLaunch: number;
      readonly rank: number;
      readonly isDayOne: boolean;
      readonly isContest: boolean;
      readonly isWeekOne: boolean;
      readonly isChallengeMode: boolean;
    };
    readonly PlayerProfile: {
      readonly playerInfo: components["schemas"]["PlayerInfo"];
      readonly stats: {
        readonly global: components["schemas"]["PlayerProfileGlobalStats"];
        readonly activity: {
          [key: string]: components["schemas"]["PlayerProfileActivityStats"];
        };
      };
      readonly worldFirstEntries: {
        [key: string]: components["schemas"]["WorldFirstEntry"] | null;
      };
    };
    readonly Teammate: {
      readonly estimatedTimePlayedSeconds: number;
      readonly clears: number;
      readonly instanceCount: number;
      readonly playerInfo: components["schemas"]["PlayerInfo"];
    };
    readonly LatestResolvedInstance: {
      /** Format: date-time */
      readonly dateCompleted: string;
      /** Format: date-time */
      readonly dateResolved: string;
      readonly instanceId: string;
    };
    readonly AtlasStatus: {
      /** @enum {string} */
      readonly status: "Crawling" | "Idle" | "Offline";
      readonly medianSecondsBehindNow: number | null;
      /** Format: date-time */
      readonly estimatedCatchUpTimestamp: string | null;
      readonly latestResolvedInstance: components["schemas"]["LatestResolvedInstance"];
    };
    readonly FloodgatesStatus: {
      /** @enum {string} */
      readonly status: "Empty" | "Blocked" | "Crawling" | "Live";
      readonly incomingRate: number;
      readonly resolveRate: number;
      readonly backlog: number;
      readonly latestResolvedInstance: components["schemas"]["LatestResolvedInstance"] | null;
      /** Format: date-time */
      readonly estimatedBacklogEmptied: string | null;
    };
    readonly ManifestResponse: {
      /** @description The mapping of each Bungie.net hash to a RaidHub activityId and versionId */
      readonly hashes: {
        [key: string]: {
          readonly activityId: number;
          readonly versionId: number;
        };
      };
      /** @description The mapping of each RaidHub activityId to its definition */
      readonly activityDefinitions: {
        [key: string]: components["schemas"]["ActivityDefinition"];
      };
      /** @description The mapping of each RaidHub versionId to its definition */
      readonly versionDefinitions: {
        [key: string]: components["schemas"]["VersionDefinition"];
      };
      /** @description The list of all activityId in order of newest to oldest */
      readonly listedRaidIds: readonly number[];
      /** @description The list of inactive raid activityId */
      readonly sunsetRaidIds: readonly number[];
      /** @description The list of raid activityId which had a prestige mode */
      readonly prestigeRaidIds: readonly number[];
      /** @description The list of raid activityId which have a master mode */
      readonly masterRaidIds: readonly number[];
      /** @description The list of raid activityId which had a contest mode */
      readonly contestRaidIds: readonly number[];
      /** @description The list of raid activityId which have been reprised from Destiny 1 */
      readonly resprisedRaidIds: readonly number[];
      /** @description The list of version versionId which are the challenge mode for reprised raids */
      readonly resprisedChallengeVersionIds: readonly number[];
      /** @description The list of activityId for Pantheon */
      readonly pantheonIds: readonly number[];
      /** @description The set of versionId for each activityId */
      readonly versionsForActivity: {
        [key: string]: readonly number[];
      };
      readonly rankingTiers: readonly {
          readonly minPercentile: number;
          readonly tierName: string;
          /** @description A tailwindcss color class for the tier */
          readonly tierColor: string;
        }[];
    };
    readonly StatusResponse: {
      readonly AtlasPGCR: components["schemas"]["AtlasStatus"];
      readonly FloodgatesPGCR: components["schemas"]["FloodgatesStatus"];
    };
    readonly PlayerSearchResponse: {
      readonly params: {
        readonly count: number;
        readonly query: string;
      };
      readonly results: readonly components["schemas"]["PlayerInfo"][];
    };
    readonly PlayerHistoryResponse: {
      readonly membershipId: string;
      /** Format: date-time */
      readonly nextCursor: string | null;
      readonly activities: readonly components["schemas"]["InstanceForPlayer"][];
    };
    readonly PlayerNotFoundError: {
      readonly membershipId: string;
    };
    readonly PlayerPrivateProfileError: {
      readonly membershipId: string;
    };
    readonly PlayerActivitiesResponse: {
      readonly membershipId: string;
      /** Format: date-time */
      readonly nextCursor: string | null;
      readonly activities: readonly components["schemas"]["InstanceForPlayer"][];
    };
    /**
     * @example {
     *   "bungieGlobalDisplayName": "Newo",
     *   "bungieGlobalDisplayNameCode": "9010",
     *   "membershipId": "4611686018488107374",
     *   "displayName": "xx_newo_xx",
     *   "iconPath": "/common/destiny2_content/icons/93844c8b76ea80683a880479e3506980.jpg",
     *   "membershipType": 3,
     *   "lastSeen": "2021-05-01T00:00:00.000Z",
     *   "isPrivate": false,
     *   "cheatLevel": 0
     * }
     */
    readonly PlayerBasicResponse: {
      /** Format: int64 */
      readonly membershipId: string;
      /** @description The platform on which the player created their account. */
      readonly membershipType: components["schemas"]["DestinyMembershipType"] | null;
      readonly iconPath: string | null;
      /** @description The platform-specific display name of the player. No longer shown in-game. */
      readonly displayName: string | null;
      readonly bungieGlobalDisplayName: string | null;
      readonly bungieGlobalDisplayNameCode: string | null;
      /** Format: date-time */
      readonly lastSeen: string;
      /** @description Whether or not the player has chosen to hide their on Bungie.net. */
      readonly isPrivate: boolean;
      readonly cheatLevel: components["schemas"]["CheatLevel"];
    };
    readonly PlayerProfileResponse: {
      readonly playerInfo: components["schemas"]["PlayerInfo"];
      readonly stats: {
        readonly global: components["schemas"]["PlayerProfileGlobalStats"];
        readonly activity: {
          [key: string]: components["schemas"]["PlayerProfileActivityStats"];
        };
      };
      readonly worldFirstEntries: {
        [key: string]: components["schemas"]["WorldFirstEntry"] | null;
      };
    };
    readonly PlayerTeammatesResponse: readonly components["schemas"]["Teammate"][];
    readonly PlayerInstancesResponse: readonly components["schemas"]["InstanceWithPlayers"][];
    readonly PlayerProtectedResourceError: {
      readonly message: string;
      readonly membershipId: string;
    };
    readonly InstanceResponse: components["schemas"]["Instance"] & ({
      readonly leaderboardRank: number | null;
      readonly metadata: components["schemas"]["InstanceMetadata"];
      readonly players: readonly components["schemas"]["InstancePlayerExtended"][];
    });
    readonly InstanceNotFoundError: {
      readonly instanceId: string;
    };
    readonly ActivityResponse: components["schemas"]["Instance"] & ({
      readonly leaderboardRank: number | null;
      readonly metadata: components["schemas"]["InstanceMetadata"];
      readonly players: readonly components["schemas"]["InstancePlayerExtended"][];
    });
    readonly LeaderboardIndividualGlobalResponse: OneOf<[{
      /** @enum {string} */
      readonly type: "team";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["TeamLeaderboardEntry"][];
    }, {
      /** @enum {string} */
      readonly type: "individual";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["IndividualLeaderboardEntry"][];
    }]>;
    readonly PlayerNotOnLeaderboardError: {
      readonly membershipId: string;
    };
    readonly LeaderboardIndividualRaidResponse: OneOf<[{
      /** @enum {string} */
      readonly type: "team";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["TeamLeaderboardEntry"][];
    }, {
      /** @enum {string} */
      readonly type: "individual";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["IndividualLeaderboardEntry"][];
    }]>;
    readonly RaidNotFoundError: {
      readonly raid: string;
    };
    readonly LeaderboardIndividualPantheonResponse: OneOf<[{
      /** @enum {string} */
      readonly type: "team";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["TeamLeaderboardEntry"][];
    }, {
      /** @enum {string} */
      readonly type: "individual";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["IndividualLeaderboardEntry"][];
    }]>;
    readonly PantheonVersionNotFoundError: {
      readonly path: string;
    };
    readonly LeaderboardTeamFirstResponse: OneOf<[{
      /** @enum {string} */
      readonly type: "team";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["TeamLeaderboardEntry"][];
    }, {
      /** @enum {string} */
      readonly type: "individual";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["IndividualLeaderboardEntry"][];
    }]>;
    readonly InvalidActivityVersionComboError: {
      readonly activity: string;
      readonly version: string;
    };
    readonly LeaderboardTeamContestResponse: OneOf<[{
      /** @enum {string} */
      readonly type: "team";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["TeamLeaderboardEntry"][];
    }, {
      /** @enum {string} */
      readonly type: "individual";
      /** @enum {string} */
      readonly format: "duration" | "numerical";
      readonly page: number;
      readonly count: number;
      readonly entries: readonly components["schemas"]["IndividualLeaderboardEntry"][];
    }]>;
    readonly LeaderboardClanResponse: readonly components["schemas"]["ClanLeaderboardEntry"][];
    /** @description A raw PGCR with a few redundant fields removed */
    readonly PgcrResponse: {
      /** Format: date-time */
      readonly period: string;
      readonly startingPhaseIndex?: number;
      readonly activityWasStartedFromBeginning?: boolean;
      readonly activityDetails: {
        /** Format: uint32 */
        readonly directorActivityHash: number;
        /** Format: int64 */
        readonly instanceId: string;
        /** @enum {integer} */
        readonly mode: 0 | 2 | 3 | 4 | 5 | 6 | 7 | 9 | 10 | 11 | 12 | 13 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91;
        readonly modes: readonly (0 | 2 | 3 | 4 | 5 | 6 | 7 | 9 | 10 | 11 | 12 | 13 | 15 | 16 | 17 | 18 | 19 | 20 | 21 | 22 | 24 | 25 | 26 | 27 | 28 | 29 | 30 | 31 | 32 | 37 | 38 | 39 | 40 | 41 | 42 | 43 | 44 | 45 | 46 | 47 | 48 | 49 | 50 | 51 | 52 | 53 | 54 | 55 | 56 | 57 | 58 | 59 | 60 | 61 | 62 | 63 | 64 | 65 | 66 | 67 | 68 | 69 | 70 | 71 | 72 | 73 | 74 | 75 | 76 | 77 | 78 | 79 | 80 | 81 | 82 | 83 | 84 | 85 | 86 | 87 | 88 | 89 | 90 | 91)[];
        readonly membershipType: components["schemas"]["DestinyMembershipType"];
      };
      readonly entries: readonly ({
          readonly player: {
            readonly destinyUserInfo: {
              readonly iconPath?: string | null;
              readonly crossSaveOverride: components["schemas"]["DestinyMembershipType"];
              readonly applicableMembershipTypes?: (readonly components["schemas"]["DestinyMembershipType"][]) | null;
              readonly membershipType?: components["schemas"]["DestinyMembershipType"] | null;
              readonly membershipId: string;
              readonly displayName?: string | null;
              readonly bungieGlobalDisplayName?: string | null;
              readonly bungieGlobalDisplayNameCode?: number | null;
            };
            readonly characterClass?: string | null;
            /** Format: uint32 */
            readonly classHash: number;
            /** Format: uint32 */
            readonly raceHash: number;
            /** Format: uint32 */
            readonly genderHash: number;
            readonly characterLevel: number;
            readonly lightLevel: number;
            /** Format: uint32 */
            readonly emblemHash: number;
          };
          readonly characterId: string;
          readonly values: {
            [key: string]: {
              readonly basic: {
                readonly value: number;
                readonly displayValue: string;
              };
            };
          };
          readonly extended?: {
            readonly weapons?: (readonly {
                readonly referenceId: number;
                readonly values: {
                  [key: string]: {
                    readonly basic: {
                      readonly value: number;
                      readonly displayValue: string;
                    };
                  };
                };
              }[]) | null;
            readonly values: {
              [key: string]: {
                readonly basic: {
                  readonly value: number;
                  readonly displayValue: string;
                };
              };
            };
          };
        })[];
    };
    readonly PGCRNotFoundError: {
      readonly instanceId: string;
    };
    readonly ClanResponse: {
      readonly aggregateStats: components["schemas"]["ClanAggregateStats"];
      readonly members: readonly ({
          readonly playerInfo: components["schemas"]["PlayerInfo"] | null;
          readonly stats: components["schemas"]["ClanMemberStats"];
        })[];
    };
    readonly ClanNotFoundError: {
      readonly groupId: string;
    };
    readonly BungieServiceOffline: {
      readonly message: string;
      readonly route: string;
    };
    readonly MetricsWeaponsRollingWeekResponse: {
      readonly energy: readonly components["schemas"]["WeaponMetric"][];
      readonly kinetic: readonly components["schemas"]["WeaponMetric"][];
      readonly power: readonly components["schemas"]["WeaponMetric"][];
    };
    readonly MetricsPopulationRollingDayResponse: readonly {
        /** Format: date-time */
        readonly hour: string;
        readonly population: components["schemas"]["PopulationByRaidMetric"];
      }[];
    readonly AdminQueryResponse: OneOf<[{
      /** @enum {string} */
      readonly type: "SELECT";
      readonly data: readonly {
          [key: string]: unknown;
        }[];
    }, {
      /** @enum {string} */
      readonly type: "HIGH COST";
      readonly data: unknown;
      readonly cost: number;
      readonly estimatedDuration: number;
    }, {
      /** @enum {string} */
      readonly type: "EXPLAIN";
      readonly data: readonly string[];
    }]>;
    readonly AdminQuerySyntaxError: {
      readonly name: string;
      readonly code?: string;
      readonly line?: string;
      readonly position?: number;
    };
    readonly AdminReportingStandingResponse: {
      readonly instanceDetails: components["schemas"]["InstanceBasic"];
      readonly blacklist: components["schemas"]["InstanceBlacklist"] | null;
      readonly flags: readonly components["schemas"]["InstanceFlag"][];
      readonly players: readonly components["schemas"]["InstancePlayerStanding"][];
    };
    readonly AdminReportingBlacklistResponse: {
      readonly blacklisted: boolean;
    };
    readonly PlayerNotInInstance: {
      readonly instanceId: string;
      readonly players: readonly string[];
    };
    readonly AdminReportingPlayerResponse: string;
    readonly AuthorizeAdminResponse: {
      readonly value: string;
      /** Format: date-time */
      readonly expires: string;
    };
    readonly InvalidClientSecretError: Record<string, never>;
    readonly AuthorizeUserResponse: {
      readonly value: string;
      /** Format: date-time */
      readonly expires: string;
    };
  };
  responses: never;
  parameters: {
  };
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
