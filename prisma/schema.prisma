generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./raidhub-sqlite.db"
}

model Profile {
  destinyMembershipId   String  @id @map("destiny_membership_id")
  destinyMembershipType Int     @map("destiny_membership_type")
  bungieMembershipId    String? @map("bungie_membership_id")
  isPrimary             Boolean @map("is_primary")
  pinnedActivityId      String? @map("pinned_activity_id")
  vanity                String? @unique
  user                  User?   @relation("UserToProfile", fields: [bungieMembershipId], references: [id], onDelete: NoAction)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([pinnedActivityId])
  @@index([bungieMembershipId])
  @@map("destiny_profile")
}

model User {
  id                 String              @id @map("bungie_membership_id")
  email              String?             @unique(map: "user_email_key")
  emailVerified      DateTime?           @map("email_verified")
  name               String?
  image              String?
  role_              String              @default("USER") @map("role")
  accounts           Account[]           @relation("UserToAccount")
  profiles           Profile[]           @relation("UserToProfile")
  raidHubAccessToken RaidHubAccessToken? @relation("UserToRaidHubAccessToken")
  sessions           Session[]           @relation("UserToSession")
  badges             Badge[]             @relation("UserToBadge")
  pgcrReports        PgcrReport[]        @relation("UserToPGCRReport")
  pgcrClosedReports  PgcrReport[]        @relation("UserToPGCRReportCloser")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@map("bungie_user")
}

model Badge {
  id          String @id
  name        String
  description String
  icon        String

  users User[] @relation("UserToBadge")

  createdAt DateTime @default(now()) @map("created_at")

  @@map("badge")
}

model Session {
  id           String   @id @default(uuid())
  userId       String   @map("bungie_membership_id")
  sessionToken String   @unique @map("session_token")
  expires      DateTime @default(now())
  user         User     @relation("UserToSession", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@index([userId])
  @@map("session")
}

model Account {
  id                String  @id @default(uuid())
  userId            String  @map("bungie_membership_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  displayName       String? @map("display_name")
  url               String? @map("url")
  refreshToken      String? @map("refresh_token")
  accessToken       String? @map("access_token")
  expiresAt         Int?    @map("expires_at")
  refreshExpiresAt  Int?    @map("refresh_expires_at")
  tokenType         String? @map("token_type")
  scope             String?
  idToken           String? @map("id_token")
  sessionState      String? @map("session_state")
  user              User    @relation("UserToAccount", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId], name: "uniqueProviderAccountId")
  @@unique([provider, userId], name: "uniqueProviderUser")
  @@index([userId])
  @@map("account")
}

model RaidHubAccessToken {
  id     String @id @default(uuid())
  userId String @unique @map("bungie_membership_id")
  value  String
  user   User   @relation("UserToRaidHubAccessToken", fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now()) @map("created_at")
  expiresAt DateTime @map("expires_at")

  @@map("raidhub_access_token")
}

enum PGCRReportStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model PgcrReport {
  reportId             Int              @id @default(autoincrement()) @map("report_id")
  instanceId           String           @map("instance_id")
  categories           String
  heuristics           String
  players              String
  explanation          String
  status               PGCRReportStatus @default(PENDING)
  isReporterInInstance Boolean          @map("is_reporter_in_instance")
  reporterId           String           @map("reporter_id")
  reporter             User             @relation("UserToPGCRReport", fields: [reporterId], references: [id], onDelete: Cascade)
  closedById           String?          @map("closed_by_id")
  closedBy             User?            @relation("UserToPGCRReportCloser", fields: [closedById], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now()) @map("created_at")
  closedAt  DateTime? @map("closed_at")

  @@index([createdAt(sort: Desc)], name: "pgcr_report_created_at_idx")
  @@index([instanceId], name: "pgcr_report_instance_id_idx")
  @@index([reporterId, createdAt(sort: Desc)], name: "pgcr_report_reporter_id_idx")
  @@map("pgcr_report")
}

model Migration {
  id        String   @id
  isApplied Boolean  @map("is_applied")
  appliedAt DateTime @default(now()) @map("applied_at")

  @@map("_migration")
}
